// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: metadata.sql

package dbgen

import (
	"context"

	jsonb "github.com/brojonat/kaggo/server/db/jsonb"
)

const getMetadataByIDs = `-- name: GetMetadataByIDs :many
SELECT id, metric_kind, data
FROM metadata
WHERE id = ANY($1::VARCHAR[])
`

func (q *Queries) GetMetadataByIDs(ctx context.Context, ids []string) ([]Metadatum, error) {
	rows, err := q.db.Query(ctx, getMetadataByIDs, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Metadatum
	for rows.Next() {
		var i Metadatum
		if err := rows.Scan(&i.ID, &i.MetricKind, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertMetadata = `-- name: InsertMetadata :exec
INSERT INTO metadata (id, metric_kind, data)
VALUES ($1, $2, $3)
`

type InsertMetadataParams struct {
	ID         string             `json:"id"`
	MetricKind string             `json:"metric_kind"`
	Data       jsonb.MetadataJSON `json:"data"`
}

func (q *Queries) InsertMetadata(ctx context.Context, arg InsertMetadataParams) error {
	_, err := q.db.Exec(ctx, insertMetadata, arg.ID, arg.MetricKind, arg.Data)
	return err
}
