// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package dbgen

import (
	"context"

	jsonb "github.com/brojonat/kaggo/server/db/jsonb"
)

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
WHERE email = ANY($1::VARCHAR[])
`

func (q *Queries) DeleteUsers(ctx context.Context, emails []string) error {
	_, err := q.db.Exec(ctx, deleteUsers, emails)
	return err
}

const getUserMetrics = `-- name: GetUserMetrics :many
SELECT u.email, u.data AS "user_metadata", m.id, m.request_kind, m.data AS "metric_metadata"
FROM users u
INNER JOIN users_metadata_through umt ON u.email = umt.email
INNER JOIN metadata m ON umt.id = m.id AND umt.request_kind = m.request_kind
WHERE u.email = $1
ORDER BY m.request_kind, m.id
`

type GetUserMetricsRow struct {
	Email          string                 `json:"email"`
	UserMetadata   jsonb.UserMetadataJSON `json:"user_metadata"`
	ID             string                 `json:"id"`
	RequestKind    string                 `json:"request_kind"`
	MetricMetadata jsonb.MetadataJSON     `json:"metric_metadata"`
}

func (q *Queries) GetUserMetrics(ctx context.Context, email string) ([]GetUserMetricsRow, error) {
	rows, err := q.db.Query(ctx, getUserMetrics, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserMetricsRow
	for rows.Next() {
		var i GetUserMetricsRow
		if err := rows.Scan(
			&i.Email,
			&i.UserMetadata,
			&i.ID,
			&i.RequestKind,
			&i.MetricMetadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsers = `-- name: GetUsers :many
SELECT email, data
FROM users
WHERE email = ANY($1::VARCHAR[])
`

func (q *Queries) GetUsers(ctx context.Context, emails []string) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers, emails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.Email, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const grantMetricGroupToUser = `-- name: GrantMetricGroupToUser :exec
INSERT INTO users_metadata_through (email, id, request_kind)
SELECT u.email, m.id, m.request_kind
FROM users u
CROSS JOIN metadata m
WHERE u.email = $1 AND m.request_kind = $2
`

type GrantMetricGroupToUserParams struct {
	Email       string `json:"email"`
	RequestKind string `json:"request_kind"`
}

func (q *Queries) GrantMetricGroupToUser(ctx context.Context, arg GrantMetricGroupToUserParams) error {
	_, err := q.db.Exec(ctx, grantMetricGroupToUser, arg.Email, arg.RequestKind)
	return err
}

const grantMetricToUser = `-- name: GrantMetricToUser :exec
INSERT INTO users_metadata_through (email, id, request_kind)
VALUES ($1, $2, $3)
`

type GrantMetricToUserParams struct {
	Email       string `json:"email"`
	ID          string `json:"id"`
	RequestKind string `json:"request_kind"`
}

func (q *Queries) GrantMetricToUser(ctx context.Context, arg GrantMetricToUserParams) error {
	_, err := q.db.Exec(ctx, grantMetricToUser, arg.Email, arg.ID, arg.RequestKind)
	return err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (email, data)
VALUES ($1, $2)
ON CONFLICT ON CONSTRAINT users_pkey DO UPDATE
SET data = EXCLUDED.data
`

type InsertUserParams struct {
	Email string                 `json:"email"`
	Data  jsonb.UserMetadataJSON `json:"data"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.Exec(ctx, insertUser, arg.Email, arg.Data)
	return err
}

const removeMetricFromUser = `-- name: RemoveMetricFromUser :exec
DELETE FROM users_metadata_through
WHERE email = $1 AND id = $2 AND request_kind = $3
`

type RemoveMetricFromUserParams struct {
	Email       string `json:"email"`
	ID          string `json:"id"`
	RequestKind string `json:"request_kind"`
}

func (q *Queries) RemoveMetricFromUser(ctx context.Context, arg RemoveMetricFromUserParams) error {
	_, err := q.db.Exec(ctx, removeMetricFromUser, arg.Email, arg.ID, arg.RequestKind)
	return err
}

const removeMetricGroupFromUser = `-- name: RemoveMetricGroupFromUser :exec
DELETE FROM users_metadata_through
WHERE email = $1 AND request_kind = $2
`

type RemoveMetricGroupFromUserParams struct {
	Email       string `json:"email"`
	RequestKind string `json:"request_kind"`
}

func (q *Queries) RemoveMetricGroupFromUser(ctx context.Context, arg RemoveMetricGroupFromUserParams) error {
	_, err := q.db.Exec(ctx, removeMetricGroupFromUser, arg.Email, arg.RequestKind)
	return err
}
