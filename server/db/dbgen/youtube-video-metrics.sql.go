// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: youtube-video-metrics.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getYouTubeVideoMetricsByIDs = `-- name: GetYouTubeVideoMetricsByIDs :many
SELECT
    y.id AS "id",
    y.ts AS "ts",
    y.views::REAL AS "value",
    'youtube.video.views' AS "metric"
FROM youtube_video_views AS y
WHERE
    y.id ILIKE ANY($1::VARCHAR[]) AND
    y.ts >= $2 AND
    y.ts <= $3
UNION ALL
SELECT
    y.id AS "id",
    y.ts AS "ts",
    y.likes::REAL AS "value",
    'youtube.video.likes' AS "metric"
FROM youtube_video_likes AS y
WHERE
    y.id ILIKE ANY($1::VARCHAR[]) AND
    y.ts >= $2 AND
    y.ts <= $3
UNION ALL
SELECT
    y.id AS "id",
    y.ts AS "ts",
    y.comments::REAL AS "value",
    'youtube.video.comments' AS "metric"
FROM youtube_video_comments AS y
WHERE
    y.id ILIKE ANY($1::VARCHAR[]) AND
    y.ts >= $2 AND
    y.ts <= $3
`

type GetYouTubeVideoMetricsByIDsParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetYouTubeVideoMetricsByIDsRow struct {
	ID     string             `json:"id"`
	Ts     pgtype.Timestamptz `json:"ts"`
	Value  float32            `json:"value"`
	Metric string             `json:"metric"`
}

func (q *Queries) GetYouTubeVideoMetricsByIDs(ctx context.Context, arg GetYouTubeVideoMetricsByIDsParams) ([]GetYouTubeVideoMetricsByIDsRow, error) {
	rows, err := q.db.Query(ctx, getYouTubeVideoMetricsByIDs, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYouTubeVideoMetricsByIDsRow
	for rows.Next() {
		var i GetYouTubeVideoMetricsByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Ts,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYouTubeVideoMetricsByIDsBucket15Min = `-- name: GetYouTubeVideoMetricsByIDsBucket15Min :many
SELECT id, bucket, value, 'youtube.video.views' AS "metric"
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '15 minutes', ts) AS "bucket",
	    MAX(views::REAL) AS "value"
	FROM youtube_video_views
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab
WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'youtube.video.likes' AS "metric"
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '15 minutes', ts) AS "bucket",
	    MAX(likes::REAL) AS "value"
	FROM youtube_video_likes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab
WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'youtube.video.comments' AS "metric"
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '15 minutes', ts) AS "bucket",
	    MAX(comments::REAL) AS "value"
	FROM youtube_video_comments
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab
WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetYouTubeVideoMetricsByIDsBucket15MinParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetYouTubeVideoMetricsByIDsBucket15MinRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetYouTubeVideoMetricsByIDsBucket15Min(ctx context.Context, arg GetYouTubeVideoMetricsByIDsBucket15MinParams) ([]GetYouTubeVideoMetricsByIDsBucket15MinRow, error) {
	rows, err := q.db.Query(ctx, getYouTubeVideoMetricsByIDsBucket15Min, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYouTubeVideoMetricsByIDsBucket15MinRow
	for rows.Next() {
		var i GetYouTubeVideoMetricsByIDsBucket15MinRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYouTubeVideoMetricsByIDsBucket1Day = `-- name: GetYouTubeVideoMetricsByIDsBucket1Day :many
SELECT id, bucket, value, 'youtube.video.views' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 day', ts) AS bucket,
	    MAX(views::REAL) AS value
	FROM youtube_video_views
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'youtube.video.likes' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 day', ts) AS bucket,
	    MAX(likes::REAL) AS value
	FROM youtube_video_likes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'youtube.video.comments' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 day', ts) AS bucket,
	    MAX(comments::REAL) AS value
	FROM youtube_video_comments
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetYouTubeVideoMetricsByIDsBucket1DayParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetYouTubeVideoMetricsByIDsBucket1DayRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetYouTubeVideoMetricsByIDsBucket1Day(ctx context.Context, arg GetYouTubeVideoMetricsByIDsBucket1DayParams) ([]GetYouTubeVideoMetricsByIDsBucket1DayRow, error) {
	rows, err := q.db.Query(ctx, getYouTubeVideoMetricsByIDsBucket1Day, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYouTubeVideoMetricsByIDsBucket1DayRow
	for rows.Next() {
		var i GetYouTubeVideoMetricsByIDsBucket1DayRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYouTubeVideoMetricsByIDsBucket1Hr = `-- name: GetYouTubeVideoMetricsByIDsBucket1Hr :many
SELECT id, bucket, value, 'youtube.video.views' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 hour', ts) AS bucket,
	    MAX(views::REAL) AS value
	FROM youtube_video_views
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'youtube.video.likes' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 hour', ts) AS bucket,
	    MAX(likes::REAL) AS value
	FROM youtube_video_likes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'youtube.video.comments' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 hour', ts) AS bucket,
	    MAX(comments::REAL) AS value
	FROM youtube_video_comments
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetYouTubeVideoMetricsByIDsBucket1HrParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetYouTubeVideoMetricsByIDsBucket1HrRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetYouTubeVideoMetricsByIDsBucket1Hr(ctx context.Context, arg GetYouTubeVideoMetricsByIDsBucket1HrParams) ([]GetYouTubeVideoMetricsByIDsBucket1HrRow, error) {
	rows, err := q.db.Query(ctx, getYouTubeVideoMetricsByIDsBucket1Hr, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYouTubeVideoMetricsByIDsBucket1HrRow
	for rows.Next() {
		var i GetYouTubeVideoMetricsByIDsBucket1HrRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYouTubeVideoMetricsByIDsBucket8Hr = `-- name: GetYouTubeVideoMetricsByIDsBucket8Hr :many
SELECT id, bucket, value, 'youtube.video.views' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '8 hours', ts) AS bucket,
	    MAX(views::REAL) AS value
	FROM youtube_video_views AS yvv
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'youtube.video.likes' AS "metric"
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '8 hours', ts) AS "bucket",
	    MAX(likes::REAL) AS "value"
	FROM youtube_video_likes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab
WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'youtube.video.comments' AS "metric"
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '8 hours', ts) AS "bucket",
	    MAX(comments::REAL) AS "value"
	FROM youtube_video_comments
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab
WHERE
    tab.id ILIKE ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetYouTubeVideoMetricsByIDsBucket8HrParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetYouTubeVideoMetricsByIDsBucket8HrRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetYouTubeVideoMetricsByIDsBucket8Hr(ctx context.Context, arg GetYouTubeVideoMetricsByIDsBucket8HrParams) ([]GetYouTubeVideoMetricsByIDsBucket8HrRow, error) {
	rows, err := q.db.Query(ctx, getYouTubeVideoMetricsByIDsBucket8Hr, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYouTubeVideoMetricsByIDsBucket8HrRow
	for rows.Next() {
		var i GetYouTubeVideoMetricsByIDsBucket8HrRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertYouTubeVideoComments = `-- name: InsertYouTubeVideoComments :exec
INSERT INTO youtube_video_comments (id, ts, comments)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertYouTubeVideoCommentsParams struct {
	ID       string `json:"id"`
	Comments int32  `json:"comments"`
}

func (q *Queries) InsertYouTubeVideoComments(ctx context.Context, arg InsertYouTubeVideoCommentsParams) error {
	_, err := q.db.Exec(ctx, insertYouTubeVideoComments, arg.ID, arg.Comments)
	return err
}

const insertYouTubeVideoLikes = `-- name: InsertYouTubeVideoLikes :exec
INSERT INTO youtube_video_likes (id, ts, likes)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertYouTubeVideoLikesParams struct {
	ID    string `json:"id"`
	Likes int32  `json:"likes"`
}

func (q *Queries) InsertYouTubeVideoLikes(ctx context.Context, arg InsertYouTubeVideoLikesParams) error {
	_, err := q.db.Exec(ctx, insertYouTubeVideoLikes, arg.ID, arg.Likes)
	return err
}

const insertYouTubeVideoViews = `-- name: InsertYouTubeVideoViews :exec
INSERT INTO youtube_video_views (id, ts, views)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertYouTubeVideoViewsParams struct {
	ID    string `json:"id"`
	Views int64  `json:"views"`
}

func (q *Queries) InsertYouTubeVideoViews(ctx context.Context, arg InsertYouTubeVideoViewsParams) error {
	_, err := q.db.Exec(ctx, insertYouTubeVideoViews, arg.ID, arg.Views)
	return err
}
