// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: kaggle-metrics.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getKaggleDatasetMetrics = `-- name: GetKaggleDatasetMetrics :many
SELECT
    id AS "id",
    ts AS "ts",
    votes::REAL AS "value",
    'kaggle.dataset.votes' AS "metric"
FROM kaggle_dataset_votes AS k
WHERE
    k.id = ANY($1::VARCHAR[]) AND
    k.ts >= $2 AND
    k.ts <= $3
UNION ALL
SELECT
    id AS "id",
    ts AS "ts",
    views::REAL AS "value",
    'kaggle.dataset.views' AS "metric"
FROM kaggle_dataset_views AS k
WHERE
    k.id = ANY($1::VARCHAR[]) AND
    k.ts >= $2 AND
    k.ts <= $3
UNION ALL
SELECT
    id AS "id",
    ts AS "ts",
    downloads::REAL AS "value",
    'kaggle.dataset.downloads' AS "metric"
FROM kaggle_dataset_downloads AS k
WHERE
    k.id = ANY($1::VARCHAR[]) AND
    k.ts >= $2 AND
    k.ts <= $3
`

type GetKaggleDatasetMetricsParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetKaggleDatasetMetricsRow struct {
	ID     string             `json:"id"`
	Ts     pgtype.Timestamptz `json:"ts"`
	Value  float32            `json:"value"`
	Metric string             `json:"metric"`
}

func (q *Queries) GetKaggleDatasetMetrics(ctx context.Context, arg GetKaggleDatasetMetricsParams) ([]GetKaggleDatasetMetricsRow, error) {
	rows, err := q.db.Query(ctx, getKaggleDatasetMetrics, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleDatasetMetricsRow
	for rows.Next() {
		var i GetKaggleDatasetMetricsRow
		if err := rows.Scan(
			&i.ID,
			&i.Ts,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKaggleDatasetMetricsByIDsBucket15Min = `-- name: GetKaggleDatasetMetricsByIDsBucket15Min :many


SELECT id, bucket, value, 'kaggle.dataset.votes' AS "metric"
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '15 minutes', ts) AS "bucket",
	    MAX(votes::REAL) AS "value"
	FROM kaggle_dataset_votes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab
WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'kaggle.dataset.views' AS "metric"
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '15 minutes', ts) AS "bucket",
	    MAX(views::REAL) AS "value"
	FROM kaggle_dataset_views
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab
WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'kaggle.dataset.downloads' AS "metric"
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '15 minutes', ts) AS "bucket",
	    MAX(downloads::REAL) AS "value"
	FROM kaggle_dataset_downloads
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab
WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetKaggleDatasetMetricsByIDsBucket15MinParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetKaggleDatasetMetricsByIDsBucket15MinRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

// Kaggle Dataset Bucketed Metrics
func (q *Queries) GetKaggleDatasetMetricsByIDsBucket15Min(ctx context.Context, arg GetKaggleDatasetMetricsByIDsBucket15MinParams) ([]GetKaggleDatasetMetricsByIDsBucket15MinRow, error) {
	rows, err := q.db.Query(ctx, getKaggleDatasetMetricsByIDsBucket15Min, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleDatasetMetricsByIDsBucket15MinRow
	for rows.Next() {
		var i GetKaggleDatasetMetricsByIDsBucket15MinRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKaggleDatasetMetricsByIDsBucket1Day = `-- name: GetKaggleDatasetMetricsByIDsBucket1Day :many
SELECT id, bucket, value, 'kaggle.dataset.votes' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 day', ts) AS bucket,
	    MAX(votes::REAL) AS value
	FROM kaggle_dataset_votes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'kaggle.dataset.views' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 day', ts) AS bucket,
	    MAX(views::REAL) AS value
	FROM kaggle_dataset_views
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'kaggle.dataset.downloads' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 hour', ts) AS bucket,
	    MAX(downloads::REAL) AS value
	FROM kaggle_dataset_downloads
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetKaggleDatasetMetricsByIDsBucket1DayParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetKaggleDatasetMetricsByIDsBucket1DayRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetKaggleDatasetMetricsByIDsBucket1Day(ctx context.Context, arg GetKaggleDatasetMetricsByIDsBucket1DayParams) ([]GetKaggleDatasetMetricsByIDsBucket1DayRow, error) {
	rows, err := q.db.Query(ctx, getKaggleDatasetMetricsByIDsBucket1Day, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleDatasetMetricsByIDsBucket1DayRow
	for rows.Next() {
		var i GetKaggleDatasetMetricsByIDsBucket1DayRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKaggleDatasetMetricsByIDsBucket1Hr = `-- name: GetKaggleDatasetMetricsByIDsBucket1Hr :many
SELECT id, bucket, value, 'kaggle.dataset.votes' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 hour', ts) AS bucket,
	    MAX(votes::REAL) AS value
	FROM kaggle_dataset_votes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'kaggle.dataset.views' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 hour', ts) AS bucket,
	    MAX(views::REAL) AS value
	FROM kaggle_dataset_views
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'kaggle.dataset.downloads' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 hour', ts) AS bucket,
	    MAX(downloads::REAL) AS value
	FROM kaggle_dataset_downloads
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetKaggleDatasetMetricsByIDsBucket1HrParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetKaggleDatasetMetricsByIDsBucket1HrRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetKaggleDatasetMetricsByIDsBucket1Hr(ctx context.Context, arg GetKaggleDatasetMetricsByIDsBucket1HrParams) ([]GetKaggleDatasetMetricsByIDsBucket1HrRow, error) {
	rows, err := q.db.Query(ctx, getKaggleDatasetMetricsByIDsBucket1Hr, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleDatasetMetricsByIDsBucket1HrRow
	for rows.Next() {
		var i GetKaggleDatasetMetricsByIDsBucket1HrRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKaggleDatasetMetricsByIDsBucket8Hr = `-- name: GetKaggleDatasetMetricsByIDsBucket8Hr :many
SELECT id, bucket, value, 'kaggle.dataset.votes' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '8 hours', ts) AS bucket,
	    MAX(votes::REAL) AS value
	FROM kaggle_dataset_votes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'kaggle.dataset.views' AS "metric"
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '8 hours', ts) AS "bucket",
	    MAX(views::REAL) AS "value"
	FROM kaggle_dataset_views
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab
WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
UNION ALL
SELECT id, bucket, value, 'kaggle.dataset.downloads' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 hour', ts) AS bucket,
	    MAX(downloads::REAL) AS value
	FROM kaggle_dataset_downloads
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetKaggleDatasetMetricsByIDsBucket8HrParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetKaggleDatasetMetricsByIDsBucket8HrRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetKaggleDatasetMetricsByIDsBucket8Hr(ctx context.Context, arg GetKaggleDatasetMetricsByIDsBucket8HrParams) ([]GetKaggleDatasetMetricsByIDsBucket8HrRow, error) {
	rows, err := q.db.Query(ctx, getKaggleDatasetMetricsByIDsBucket8Hr, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleDatasetMetricsByIDsBucket8HrRow
	for rows.Next() {
		var i GetKaggleDatasetMetricsByIDsBucket8HrRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKaggleNotebookMetrics = `-- name: GetKaggleNotebookMetrics :many
SELECT
    k.id AS "id",
    k.ts AS "ts",
    k.votes::REAL AS "value",
    'kaggle.notebook.votes' AS "metric"
FROM kaggle_notebook_votes k
WHERE
    k.id = ANY($1::VARCHAR[]) AND
    k.ts >= $2 AND
    k.ts <= $3
`

type GetKaggleNotebookMetricsParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetKaggleNotebookMetricsRow struct {
	ID     string             `json:"id"`
	Ts     pgtype.Timestamptz `json:"ts"`
	Value  float32            `json:"value"`
	Metric string             `json:"metric"`
}

func (q *Queries) GetKaggleNotebookMetrics(ctx context.Context, arg GetKaggleNotebookMetricsParams) ([]GetKaggleNotebookMetricsRow, error) {
	rows, err := q.db.Query(ctx, getKaggleNotebookMetrics, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleNotebookMetricsRow
	for rows.Next() {
		var i GetKaggleNotebookMetricsRow
		if err := rows.Scan(
			&i.ID,
			&i.Ts,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKaggleNotebookMetricsByIDsBucket15Min = `-- name: GetKaggleNotebookMetricsByIDsBucket15Min :many


SELECT id, bucket, value, 'kaggle.notebook.votes' AS "metric"
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '15 minutes', ts) AS "bucket",
	    MAX(votes::REAL) AS "value"
	FROM kaggle_notebook_votes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab
WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetKaggleNotebookMetricsByIDsBucket15MinParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetKaggleNotebookMetricsByIDsBucket15MinRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

// Kaggle Notebook Bucketed Metrics
func (q *Queries) GetKaggleNotebookMetricsByIDsBucket15Min(ctx context.Context, arg GetKaggleNotebookMetricsByIDsBucket15MinParams) ([]GetKaggleNotebookMetricsByIDsBucket15MinRow, error) {
	rows, err := q.db.Query(ctx, getKaggleNotebookMetricsByIDsBucket15Min, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleNotebookMetricsByIDsBucket15MinRow
	for rows.Next() {
		var i GetKaggleNotebookMetricsByIDsBucket15MinRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKaggleNotebookMetricsByIDsBucket1Day = `-- name: GetKaggleNotebookMetricsByIDsBucket1Day :many
SELECT id, bucket, value, 'kaggle.notebook.votes' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 day', ts) AS bucket,
	    MAX(votes::REAL) AS value
	FROM kaggle_notebook_votes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetKaggleNotebookMetricsByIDsBucket1DayParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetKaggleNotebookMetricsByIDsBucket1DayRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetKaggleNotebookMetricsByIDsBucket1Day(ctx context.Context, arg GetKaggleNotebookMetricsByIDsBucket1DayParams) ([]GetKaggleNotebookMetricsByIDsBucket1DayRow, error) {
	rows, err := q.db.Query(ctx, getKaggleNotebookMetricsByIDsBucket1Day, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleNotebookMetricsByIDsBucket1DayRow
	for rows.Next() {
		var i GetKaggleNotebookMetricsByIDsBucket1DayRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKaggleNotebookMetricsByIDsBucket1Hr = `-- name: GetKaggleNotebookMetricsByIDsBucket1Hr :many
SELECT id, bucket, value, 'kaggle.notebook.votes' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '1 hour', ts) AS bucket,
	    MAX(votes::REAL) AS value
	FROM kaggle_notebook_votes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetKaggleNotebookMetricsByIDsBucket1HrParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetKaggleNotebookMetricsByIDsBucket1HrRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetKaggleNotebookMetricsByIDsBucket1Hr(ctx context.Context, arg GetKaggleNotebookMetricsByIDsBucket1HrParams) ([]GetKaggleNotebookMetricsByIDsBucket1HrRow, error) {
	rows, err := q.db.Query(ctx, getKaggleNotebookMetricsByIDsBucket1Hr, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleNotebookMetricsByIDsBucket1HrRow
	for rows.Next() {
		var i GetKaggleNotebookMetricsByIDsBucket1HrRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKaggleNotebookMetricsByIDsBucket8Hr = `-- name: GetKaggleNotebookMetricsByIDsBucket8Hr :many
SELECT id, bucket, value, 'kaggle.notebook.votes' AS metric
FROM (
	SELECT
		id,
	    time_bucket(INTERVAL '8 hours', ts) AS bucket,
	    MAX(votes::REAL) AS value
	FROM kaggle_notebook_votes
	GROUP BY id, bucket
	ORDER BY id, bucket
) AS tab WHERE
    tab.id = ANY($1::VARCHAR[]) AND
    tab.bucket >= $2::TIMESTAMPTZ AND
    tab.bucket <= $3::TIMESTAMPTZ
`

type GetKaggleNotebookMetricsByIDsBucket8HrParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetKaggleNotebookMetricsByIDsBucket8HrRow struct {
	ID     string      `json:"id"`
	Bucket interface{} `json:"bucket"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetKaggleNotebookMetricsByIDsBucket8Hr(ctx context.Context, arg GetKaggleNotebookMetricsByIDsBucket8HrParams) ([]GetKaggleNotebookMetricsByIDsBucket8HrRow, error) {
	rows, err := q.db.Query(ctx, getKaggleNotebookMetricsByIDsBucket8Hr, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleNotebookMetricsByIDsBucket8HrRow
	for rows.Next() {
		var i GetKaggleNotebookMetricsByIDsBucket8HrRow
		if err := rows.Scan(
			&i.ID,
			&i.Bucket,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertKaggleDatasetDownloads = `-- name: InsertKaggleDatasetDownloads :exec
INSERT INTO kaggle_dataset_downloads (id, ts, downloads)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertKaggleDatasetDownloadsParams struct {
	ID        string `json:"id"`
	Downloads int32  `json:"downloads"`
}

func (q *Queries) InsertKaggleDatasetDownloads(ctx context.Context, arg InsertKaggleDatasetDownloadsParams) error {
	_, err := q.db.Exec(ctx, insertKaggleDatasetDownloads, arg.ID, arg.Downloads)
	return err
}

const insertKaggleDatasetViews = `-- name: InsertKaggleDatasetViews :exec
INSERT INTO kaggle_dataset_views (id, ts, views)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertKaggleDatasetViewsParams struct {
	ID    string `json:"id"`
	Views int32  `json:"views"`
}

func (q *Queries) InsertKaggleDatasetViews(ctx context.Context, arg InsertKaggleDatasetViewsParams) error {
	_, err := q.db.Exec(ctx, insertKaggleDatasetViews, arg.ID, arg.Views)
	return err
}

const insertKaggleDatasetVotes = `-- name: InsertKaggleDatasetVotes :exec
INSERT INTO kaggle_dataset_votes (id, ts, votes)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertKaggleDatasetVotesParams struct {
	ID    string `json:"id"`
	Votes int32  `json:"votes"`
}

func (q *Queries) InsertKaggleDatasetVotes(ctx context.Context, arg InsertKaggleDatasetVotesParams) error {
	_, err := q.db.Exec(ctx, insertKaggleDatasetVotes, arg.ID, arg.Votes)
	return err
}

const insertKaggleNotebookVotes = `-- name: InsertKaggleNotebookVotes :exec
INSERT INTO kaggle_notebook_votes (id, ts, votes)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertKaggleNotebookVotesParams struct {
	ID    string `json:"id"`
	Votes int32  `json:"votes"`
}

func (q *Queries) InsertKaggleNotebookVotes(ctx context.Context, arg InsertKaggleNotebookVotesParams) error {
	_, err := q.db.Exec(ctx, insertKaggleNotebookVotes, arg.ID, arg.Votes)
	return err
}
