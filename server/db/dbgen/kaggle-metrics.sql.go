// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: kaggle-metrics.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getKaggleDatasetMetrics = `-- name: GetKaggleDatasetMetrics :many
SELECT slug, ts, val, 'kdv' AS "metric"
FROM kaggle_dataset_votes kdv
WHERE kdv.slug = $1
UNION ALL
SELECT slug, ts, val, 'kdd' AS "metric"
FROM kaggle_dataset_downloads kdd
WHERE kdd.slug = $1
`

type GetKaggleDatasetMetricsRow struct {
	Slug   string             `json:"slug"`
	Ts     pgtype.Timestamptz `json:"ts"`
	Val    int32              `json:"val"`
	Metric string             `json:"metric"`
}

func (q *Queries) GetKaggleDatasetMetrics(ctx context.Context, slug string) ([]GetKaggleDatasetMetricsRow, error) {
	rows, err := q.db.Query(ctx, getKaggleDatasetMetrics, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleDatasetMetricsRow
	for rows.Next() {
		var i GetKaggleDatasetMetricsRow
		if err := rows.Scan(
			&i.Slug,
			&i.Ts,
			&i.Val,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKaggleNotebookMetrics = `-- name: GetKaggleNotebookMetrics :many
SELECT slug, ts, val, 'knv' AS "metric"
FROM kaggle_notebook_votes knv
WHERE knv.slug = $1
UNION ALL
SELECT slug, ts, val, 'knd' AS "metric"
FROM kaggle_notebook_downloads knd
WHERE knd.slug = $1
`

type GetKaggleNotebookMetricsRow struct {
	Slug   string             `json:"slug"`
	Ts     pgtype.Timestamptz `json:"ts"`
	Val    int32              `json:"val"`
	Metric string             `json:"metric"`
}

func (q *Queries) GetKaggleNotebookMetrics(ctx context.Context, slug string) ([]GetKaggleNotebookMetricsRow, error) {
	rows, err := q.db.Query(ctx, getKaggleNotebookMetrics, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetKaggleNotebookMetricsRow
	for rows.Next() {
		var i GetKaggleNotebookMetricsRow
		if err := rows.Scan(
			&i.Slug,
			&i.Ts,
			&i.Val,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertKaggleDatasetDownloads = `-- name: InsertKaggleDatasetDownloads :exec
INSERT INTO kaggle_dataset_downloads (slug, ts, val)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertKaggleDatasetDownloadsParams struct {
	Slug      string `json:"slug"`
	Downloads int32  `json:"downloads"`
}

func (q *Queries) InsertKaggleDatasetDownloads(ctx context.Context, arg InsertKaggleDatasetDownloadsParams) error {
	_, err := q.db.Exec(ctx, insertKaggleDatasetDownloads, arg.Slug, arg.Downloads)
	return err
}

const insertKaggleDatasetVotes = `-- name: InsertKaggleDatasetVotes :exec
INSERT INTO kaggle_dataset_votes (slug, ts, val)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertKaggleDatasetVotesParams struct {
	Slug  string `json:"slug"`
	Votes int32  `json:"votes"`
}

func (q *Queries) InsertKaggleDatasetVotes(ctx context.Context, arg InsertKaggleDatasetVotesParams) error {
	_, err := q.db.Exec(ctx, insertKaggleDatasetVotes, arg.Slug, arg.Votes)
	return err
}

const insertKaggleNotebookDownloads = `-- name: InsertKaggleNotebookDownloads :exec
INSERT INTO kaggle_notebook_downloads (slug, ts, val)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertKaggleNotebookDownloadsParams struct {
	Slug      string `json:"slug"`
	Downloads int32  `json:"downloads"`
}

func (q *Queries) InsertKaggleNotebookDownloads(ctx context.Context, arg InsertKaggleNotebookDownloadsParams) error {
	_, err := q.db.Exec(ctx, insertKaggleNotebookDownloads, arg.Slug, arg.Downloads)
	return err
}

const insertKaggleNotebookVotes = `-- name: InsertKaggleNotebookVotes :exec
INSERT INTO kaggle_notebook_votes (slug, ts, val)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertKaggleNotebookVotesParams struct {
	Slug  string `json:"slug"`
	Votes int32  `json:"votes"`
}

func (q *Queries) InsertKaggleNotebookVotes(ctx context.Context, arg InsertKaggleNotebookVotesParams) error {
	_, err := q.db.Exec(ctx, insertKaggleNotebookVotes, arg.Slug, arg.Votes)
	return err
}
