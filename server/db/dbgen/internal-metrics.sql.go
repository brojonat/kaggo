// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: internal-metrics.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getInternalMetrics = `-- name: GetInternalMetrics :many
SELECT id, ts, val, 'internal_random' AS "metric"
FROM internal_random ir
WHERE ir.id = $1
`

type GetInternalMetricsRow struct {
	ID     string             `json:"id"`
	Ts     pgtype.Timestamptz `json:"ts"`
	Val    int32              `json:"val"`
	Metric string             `json:"metric"`
}

func (q *Queries) GetInternalMetrics(ctx context.Context, id string) ([]GetInternalMetricsRow, error) {
	rows, err := q.db.Query(ctx, getInternalMetrics, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInternalMetricsRow
	for rows.Next() {
		var i GetInternalMetricsRow
		if err := rows.Scan(
			&i.ID,
			&i.Ts,
			&i.Val,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertInternalRandom = `-- name: InsertInternalRandom :exec
INSERT INTO internal_random (id, ts, val)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertInternalRandomParams struct {
	ID    string `json:"id"`
	Value int32  `json:"value"`
}

func (q *Queries) InsertInternalRandom(ctx context.Context, arg InsertInternalRandomParams) error {
	_, err := q.db.Exec(ctx, insertInternalRandom, arg.ID, arg.Value)
	return err
}
