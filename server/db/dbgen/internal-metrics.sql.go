// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: internal-metrics.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getInternalMetricsByIDs = `-- name: GetInternalMetricsByIDs :many
SELECT
    id AS "id",
    ts AS "ts",
    val AS "value",
    'internal.random' AS "metric"
FROM internal_random AS i
WHERE
    i.id ILIKE ANY($1::VARCHAR[]) AND
    i.ts >= $2 AND
    i.ts <= $3
`

type GetInternalMetricsByIDsParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetInternalMetricsByIDsRow struct {
	ID     string             `json:"id"`
	Ts     pgtype.Timestamptz `json:"ts"`
	Value  int32              `json:"value"`
	Metric string             `json:"metric"`
}

func (q *Queries) GetInternalMetricsByIDs(ctx context.Context, arg GetInternalMetricsByIDsParams) ([]GetInternalMetricsByIDsRow, error) {
	rows, err := q.db.Query(ctx, getInternalMetricsByIDs, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetInternalMetricsByIDsRow
	for rows.Next() {
		var i GetInternalMetricsByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Ts,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertInternalRandom = `-- name: InsertInternalRandom :exec
INSERT INTO internal_random (id, ts, val)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertInternalRandomParams struct {
	ID    string `json:"id"`
	Value int32  `json:"value"`
}

func (q *Queries) InsertInternalRandom(ctx context.Context, arg InsertInternalRandomParams) error {
	_, err := q.db.Exec(ctx, insertInternalRandom, arg.ID, arg.Value)
	return err
}
