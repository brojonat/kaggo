// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reddit-metrics.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRedditCommentMetricsByID = `-- name: GetRedditCommentMetricsByID :many
SELECT id, ts, score, 'reddit.comment.score' AS "metric"
FROM reddit_comment_score rcs
WHERE rcs.id = $1
UNION ALL
SELECT id, ts, controversiality, 'reddit.comment.controversiality' AS "metric"
FROM reddit_comment_controversiality rcc
WHERE rcc.id = $1
`

type GetRedditCommentMetricsByIDRow struct {
	ID     string             `json:"id"`
	Ts     pgtype.Timestamptz `json:"ts"`
	Score  int32              `json:"score"`
	Metric string             `json:"metric"`
}

func (q *Queries) GetRedditCommentMetricsByID(ctx context.Context, id string) ([]GetRedditCommentMetricsByIDRow, error) {
	rows, err := q.db.Query(ctx, getRedditCommentMetricsByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRedditCommentMetricsByIDRow
	for rows.Next() {
		var i GetRedditCommentMetricsByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Ts,
			&i.Score,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRedditPostMetricsByID = `-- name: GetRedditPostMetricsByID :many
SELECT id, title, ts, score, 'reddit.post.score' AS "metric"
FROM reddit_post_score rps
WHERE rps.id = $1
UNION ALL
SELECT id, title, ts, ratio, 'reddit.post.ratio' AS "metric"
FROM reddit_post_ratio rpr
WHERE rpr.id = $1
`

type GetRedditPostMetricsByIDRow struct {
	ID     string             `json:"id"`
	Title  string             `json:"title"`
	Ts     pgtype.Timestamptz `json:"ts"`
	Score  int32              `json:"score"`
	Metric string             `json:"metric"`
}

func (q *Queries) GetRedditPostMetricsByID(ctx context.Context, id string) ([]GetRedditPostMetricsByIDRow, error) {
	rows, err := q.db.Query(ctx, getRedditPostMetricsByID, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRedditPostMetricsByIDRow
	for rows.Next() {
		var i GetRedditPostMetricsByIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Ts,
			&i.Score,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertRedditCommentControversiality = `-- name: InsertRedditCommentControversiality :exec
INSERT INTO reddit_comment_controversiality (id, ts, controversiality)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertRedditCommentControversialityParams struct {
	ID               string  `json:"id"`
	Controversiality float32 `json:"controversiality"`
}

func (q *Queries) InsertRedditCommentControversiality(ctx context.Context, arg InsertRedditCommentControversialityParams) error {
	_, err := q.db.Exec(ctx, insertRedditCommentControversiality, arg.ID, arg.Controversiality)
	return err
}

const insertRedditCommentScore = `-- name: InsertRedditCommentScore :exec
INSERT INTO reddit_comment_score (id, ts, score)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertRedditCommentScoreParams struct {
	ID    string `json:"id"`
	Score int32  `json:"score"`
}

func (q *Queries) InsertRedditCommentScore(ctx context.Context, arg InsertRedditCommentScoreParams) error {
	_, err := q.db.Exec(ctx, insertRedditCommentScore, arg.ID, arg.Score)
	return err
}

const insertRedditPostRatio = `-- name: InsertRedditPostRatio :exec
INSERT INTO reddit_post_ratio (id, title, ts, ratio)
VALUES ($1, $2, NOW()::TIMESTAMPTZ, $3)
`

type InsertRedditPostRatioParams struct {
	ID    string  `json:"id"`
	Title string  `json:"title"`
	Ratio float32 `json:"ratio"`
}

func (q *Queries) InsertRedditPostRatio(ctx context.Context, arg InsertRedditPostRatioParams) error {
	_, err := q.db.Exec(ctx, insertRedditPostRatio, arg.ID, arg.Title, arg.Ratio)
	return err
}

const insertRedditPostScore = `-- name: InsertRedditPostScore :exec
INSERT INTO reddit_post_score (id, title, ts, score)
VALUES ($1, $2, NOW()::TIMESTAMPTZ, $3)
`

type InsertRedditPostScoreParams struct {
	ID    string `json:"id"`
	Title string `json:"title"`
	Score int32  `json:"score"`
}

func (q *Queries) InsertRedditPostScore(ctx context.Context, arg InsertRedditPostScoreParams) error {
	_, err := q.db.Exec(ctx, insertRedditPostScore, arg.ID, arg.Title, arg.Score)
	return err
}
