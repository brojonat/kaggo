// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: youtube-channel-metrics.sql

package dbgen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getYouTubeChannelMetricsByIDs = `-- name: GetYouTubeChannelMetricsByIDs :many
SELECT
    y.id AS "id",
    y.ts AS "ts",
    y.views::REAL AS "value",
    'youtube.channel.views' AS "metric"
FROM youtube_channel_views AS y
WHERE
    y.id = ANY($1::VARCHAR[]) AND
    y.ts >= $2 AND
    y.ts <= $3
UNION ALL
SELECT
    y.id AS "id",
    y.ts AS "ts",
    y.subscribers::REAL AS "value",
    'youtube.channel.subscribers' AS "metric"
FROM youtube_channel_subscribers AS y
WHERE
    y.id = ANY($1::VARCHAR[]) AND
    y.ts >= $2 AND
    y.ts <= $3
UNION ALL
SELECT
    y.id AS "id",
    y.ts AS "ts",
    y.videos::REAL AS "value",
    'youtube.channel.videos' AS "metric"
FROM youtube_channel_videos AS y
WHERE
    y.id = ANY($1::VARCHAR[]) AND
    y.ts >= $2 AND
    y.ts <= $3
`

type GetYouTubeChannelMetricsByIDsParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetYouTubeChannelMetricsByIDsRow struct {
	ID     string             `json:"id"`
	Ts     pgtype.Timestamptz `json:"ts"`
	Value  float32            `json:"value"`
	Metric string             `json:"metric"`
}

func (q *Queries) GetYouTubeChannelMetricsByIDs(ctx context.Context, arg GetYouTubeChannelMetricsByIDsParams) ([]GetYouTubeChannelMetricsByIDsRow, error) {
	rows, err := q.db.Query(ctx, getYouTubeChannelMetricsByIDs, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYouTubeChannelMetricsByIDsRow
	for rows.Next() {
		var i GetYouTubeChannelMetricsByIDsRow
		if err := rows.Scan(
			&i.ID,
			&i.Ts,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYouTubeChannelMetricsByIDsBucketed = `-- name: GetYouTubeChannelMetricsByIDsBucketed :many
SELECT
    y.id AS "id",
    FIRST(y.title, y.ts) AS "title",
    time_bucket(INTERVAL '60 min', y.ts) AS "ts",
    MAX(y.views::REAL) AS "value",
    'youtube.channel.views' AS "metric"
FROM youtube_channel_views AS y
GROUP BY y.id, y.ts
HAVING
    y.id = ANY($1::VARCHAR[]) AND
    y.ts >= $2 AND
    y.ts <= $3
`

type GetYouTubeChannelMetricsByIDsBucketedParams struct {
	Ids     []string           `json:"ids"`
	TsStart pgtype.Timestamptz `json:"ts_start"`
	TsEnd   pgtype.Timestamptz `json:"ts_end"`
}

type GetYouTubeChannelMetricsByIDsBucketedRow struct {
	ID     string      `json:"id"`
	Title  interface{} `json:"title"`
	Ts     interface{} `json:"ts"`
	Value  interface{} `json:"value"`
	Metric string      `json:"metric"`
}

func (q *Queries) GetYouTubeChannelMetricsByIDsBucketed(ctx context.Context, arg GetYouTubeChannelMetricsByIDsBucketedParams) ([]GetYouTubeChannelMetricsByIDsBucketedRow, error) {
	rows, err := q.db.Query(ctx, getYouTubeChannelMetricsByIDsBucketed, arg.Ids, arg.TsStart, arg.TsEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetYouTubeChannelMetricsByIDsBucketedRow
	for rows.Next() {
		var i GetYouTubeChannelMetricsByIDsBucketedRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Ts,
			&i.Value,
			&i.Metric,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertYouTubeChannelSubscribers = `-- name: InsertYouTubeChannelSubscribers :exec
INSERT INTO youtube_channel_subscribers (id, ts, subscribers)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertYouTubeChannelSubscribersParams struct {
	ID          string `json:"id"`
	Subscribers int32  `json:"subscribers"`
}

func (q *Queries) InsertYouTubeChannelSubscribers(ctx context.Context, arg InsertYouTubeChannelSubscribersParams) error {
	_, err := q.db.Exec(ctx, insertYouTubeChannelSubscribers, arg.ID, arg.Subscribers)
	return err
}

const insertYouTubeChannelVideos = `-- name: InsertYouTubeChannelVideos :exec
INSERT INTO youtube_channel_videos (id, ts, videos)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertYouTubeChannelVideosParams struct {
	ID     string `json:"id"`
	Videos int32  `json:"videos"`
}

func (q *Queries) InsertYouTubeChannelVideos(ctx context.Context, arg InsertYouTubeChannelVideosParams) error {
	_, err := q.db.Exec(ctx, insertYouTubeChannelVideos, arg.ID, arg.Videos)
	return err
}

const insertYouTubeChannelViews = `-- name: InsertYouTubeChannelViews :exec
INSERT INTO youtube_channel_views (id, ts, views)
VALUES ($1, NOW()::TIMESTAMPTZ, $2)
`

type InsertYouTubeChannelViewsParams struct {
	ID    string `json:"id"`
	Views int32  `json:"views"`
}

func (q *Queries) InsertYouTubeChannelViews(ctx context.Context, arg InsertYouTubeChannelViewsParams) error {
	_, err := q.db.Exec(ctx, insertYouTubeChannelViews, arg.ID, arg.Views)
	return err
}
